---
name: Next semantic-release version
description: GitHub Action to calculate the next semantic-release version number
author: EricCrosson
branding:
  icon: package
  color: orange

outputs:
  new-release-published:
    description: Indicates whether a new release will be published. The value is a string, either 'true' or 'false'.
    value: ${{ steps.get-next-version.outputs.new-release-published }}
  new-release-version:
    description: If a new release will be published, the version of the new release. The value is a string, for example '1.3.0'.
    value: ${{ steps.get-next-version.outputs.new-release-version }}

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        # Fetch all history and tags for calculating next semantic version
        fetch-depth: 0

    - name: Configure Node.js
      uses: actions/setup-node@v3
      with:
        node-version: lts/*
        cache: npm

    - run: |
        : import next-release-version Node.js package manifests
        rm -f package.json package-lock.json
        cp ${{ github.action_path }}/package.json package.json
        cp ${{ github.action_path }}/package-lock.json package-lock.json
      shell: bash

    - name: Cache npm dependencies
      uses: actions/cache@v3
      id: cache-node-modules
      with:
        path: node_modules
        key: semantic-release-extras-next-release-version-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

    - if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: |
        : install semantic-release
        npm ci --ignore-scripts --loglevel error
      shell: bash

    # This is a questionable choice, and likely means this workflow doesn't yet
    # support projects that configure semantic-release with one of the other
    # supported configuration methods.
    #
    # This step is necessary in my projects that use a .releaserc.json file
    # with a non-stock semantic-release plugin, because semantic-release throws
    # an error when the plugin is referenced in the configuration but not
    # present in the node_modules directory.
    #
    # Therefore, a quick and drity workaround is to clear out the configuration
    # before invoking semantic-release.
    - run: |
        : remove existing semantic-release configuration
        rm .releaserc.json
      shell: bash

    - id: get-next-version
      run: |
        : calculate next semantic-release version
        ./node_modules/.bin/semantic-release --dry-run --verify-conditions semantic-release-export-data --generate-notes semantic-release-export-data
      shell: bash
